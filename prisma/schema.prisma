// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 
model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String
  accounts      Account[]
  sessions      Session[]

  role         Role
  appointments Appointment[] @relation("PatientAppointments")
  availabilities Availability[]
  unavailabilities Unavailability[]
 
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  practitionerAppointments Appointment[] @relation("PractitionerAppointments")
  creatorAppointments Appointment[] @relation("CreatorAppointments")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Appointment {
  id             String   @id @default(uuid())
  patient        User     @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId      String
  practitioner   User     @relation("PractitionerAppointments", fields: [practitionerId], references: [id])
  practitionerId String
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(PENDING)
  patientNote    String?
  practionnerNote String?
  createdAt      DateTime @default(now())
  creator        User     @relation("CreatorAppointments", fields: [creatorId], references: [id])
  creatorId      String
  createdByRole  Role
  cancelledByRole Role

}

model Availability {
  id             String   @id @default(uuid())
  practitioner   User     @relation(fields: [practitionerId], references: [id])
  practitionerId String
  dayOfWeek      Int      // 0 = dimanche, 6 = samedi
  startTime      Float
  endTime        Float
}

model Unavailability {
  id             String   @id @default(uuid())
  practitioner   User     @relation(fields: [practitionerId], references: [id])
  practitionerId String  
  startTime      DateTime
  endTime        DateTime
  reason         String
  createdAt      DateTime @default(now())
}

enum Role {
  user
  practitioner
  admin
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
